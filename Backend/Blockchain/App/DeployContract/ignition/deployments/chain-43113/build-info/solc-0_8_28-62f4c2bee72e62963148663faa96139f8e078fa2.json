{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-62f4c2bee72e62963148663faa96139f8e078fa2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/store_scores.sol": "project/contracts/store_scores.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/store_scores.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.2 <0.9.0;\n\nstruct Data{\n    string Name1;\n    string Name2;\n\n    uint256 Score1;\n    uint256 Score2;\n}\n\ncontract store_scores {\n    address private owner;\n\n    mapping (uint256 => Data) public data;\n\n    function store(uint256 id, string memory name1, string memory name2, uint256 score1, uint256 score2) public {\n\n        require(msg.sender == owner, \"Only owner can store data\");\n        data[id].Name1 = name1;\n        data[id].Name2 = name2;\n        data[id].Score1 = score1;\n        data[id].Score2 = score2;\n    }\n\n    function get_name1(uint256 id) public view returns (string memory) {\n        return data[id].Name1;\n    }\n    function get_name2(uint256 id) public view returns (string memory) {\n        return data[id].Name2;\n    }\n    function get_score1(uint256 id) public view returns (uint256) {\n        return data[id].Score1;\n    }\n    function get_score2(uint256 id) public view returns (uint256) {\n        return data[id].Score2;\n    }\n\n    function get_winner(uint256 id) public view returns (string memory) {\n        return data[id].Score1 > data[id].Score2 ? data[id].Name1 : data[id].Name2;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n}\n"
      }
    }
  }
}